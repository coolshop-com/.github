name: Move Issue to ðŸ‘€ In review on Linked PR

on:
  workflow_call:

jobs:
  move-issue-to-in-review:
    runs-on: ubuntu-latest

    steps:
      - name: Find linked issue number
        id: extract_issue
        env:
          GITHUB_TOKEN: ${{ secrets.ISSUES_AND_PRS_TOKEN }}
        run: |
          echo "github: ${{ github }}"
          PR_NUMBER=${{ github.event.number }}
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          echo "Fetching linked issues for PR #$PR_NUMBER in $REPO_OWNER/$REPO_NAME"

          QUERY='{ "query": "query { repository(owner: \"'$REPO_OWNER'\", name: \"'$REPO_NAME'\") { pullRequest(number: '$PR_NUMBER') { closingIssuesReferences(first: 100) { edges { node { id title url } } } } } }" }'

          RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$QUERY" https://api.github.com/graphql)

          ISSUE_NUMBER=$(echo "$RESPONSE" | jq -r '.data.repository.pullRequest.closingIssuesReferences.edges[0].node.url' | grep -oE '[0-9]+$')

          if [[ -n "$ISSUE_NUMBER" ]]; then
            echo "Linked issue found: #$ISSUE_NUMBER"
            echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> "$GITHUB_ENV"
          else
            echo "No linked issue found."
            exit 1
          fi

      - name: Move issue to 'ðŸ‘€ In review' column in GitHub Project
        if: env.ISSUE_NUMBER != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwDOANPumc4APBrR";
            const columnName = "ðŸ‘€ In review";  // Column to move issue to
            const issueNumber = process.env.ISSUE_NUMBER;

            if (!issueNumber) {
              console.log("No issue number found.");
              return;
            }

            // Fetch the issue ID by issue number
            const { repository } = await github.graphql(`
              query($owner: String!, $repo: String!, $issue: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issue) {
                    id
                  }
                }
              }
            `, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue: parseInt(issueNumber)
            });

            if (!repository.issue) {
              console.log("Issue not found.");
              return;
            }
            const issueId = repository.issue.id;

            // Fetch the project and find the "Status" field
            const { node } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = node.fields.nodes.find(field => field.name === "Status");
            if (!statusField) {
              console.log("Status field not found.");
              return;
            }

            // Find the "ðŸ‘€ In review" option in the Status field
            const { node: statusFieldData } = await github.graphql(`
              query($fieldId: ID!) {
                node(id: $fieldId) {
                  ... on ProjectV2Field {
                    options {
                      id
                      name
                    }
                  }
                }
              }
            `, { fieldId: statusField.id });

            const inReviewOption = statusFieldData.options.find(option => option.name === columnName);
            if (!inReviewOption) {
              console.log(`Column "${columnName}" not found.`);
              return;
            }

            // Move the issue to "ðŸ‘€ In review"
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  clientMutationId
                }
              }
            `, {
              projectId,
              itemId: issueId,
              fieldId: statusField.id,
              optionId: inReviewOption.id
            });

            console.log(`Issue #${issueNumber} moved to "${columnName}"`);
